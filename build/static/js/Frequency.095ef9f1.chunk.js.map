{"version":3,"file":"static/js/Frequency.095ef9f1.chunk.js","mappings":"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","sources":["components/FreequancyPanel/DataTable.jsx","components/FreequancyPanel/FreequancyChange.jsx","components/FreequancyPanel/index.jsx","modules/FreequancyModule/DataTableDropMen.jsx","modules/FreequancyModule/index.jsx","pages/Frequency.jsx","../node_modules/@ant-design/icons/es/icons/EditOutlined.js"],"sourcesContent":["import React, { useCallback, useEffect } from 'react';\r\nimport { Dropdown, Table } from 'antd';\r\nimport { Button, PageHeader } from 'antd';\r\nimport { EllipsisOutlined } from '@ant-design/icons';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { erp } from '@/redux/erp/actions';\r\nimport { settings } from '@/redux/settings/actions';\r\nimport { selectListItems } from '@/redux/erp/selectors';\r\nimport { useErpContext } from '@/context/erp';\r\nimport uniqueId from '@/utils/uinqueId';\r\n\r\nimport { RedoOutlined, PlusOutlined } from '@ant-design/icons';\r\nimport TableResponsive from '../TableResponsive';\r\nfunction AddNewItem({ config }) {\r\n  const { ADD_NEW_ENTITY } = config;\r\n  const { erpContextAction } = useErpContext();\r\n  const { createPanel } = erpContextAction;\r\n  const handelClick = () => {\r\n    createPanel.open();\r\n  };\r\n\r\n  return (\r\n    <Button onClick={handelClick} type=\"primary\" icon={<PlusOutlined />} className='primaryBtn'>\r\n      {ADD_NEW_ENTITY}\r\n    </Button>\r\n  );\r\n}\r\n\r\nexport default function DataTable({ config, DataTableDropMenu }) {\r\n  let { entity, dataTableColumns, listURL, arrFiltersReq, filters, sorter } = config;\r\n  const { DATATABLE_TITLE } = config;\r\n  dataTableColumns = [\r\n    {\r\n      title: 'Sl.No',\r\n      dataIndex: 'slNo',\r\n      width: 50,\r\n      render: (value, record, index) => (`${value || index + 1}`),\r\n    },\r\n    ...dataTableColumns,\r\n    {\r\n      title: '',\r\n      render: (value, row, index) => (\r\n        <Dropdown overlay={DataTableDropMenu({ row, entity })} trigger={['click']}>\r\n          <EllipsisOutlined style={{ cursor: 'pointer', fontSize: '24px' }} />\r\n        </Dropdown>\r\n      ),\r\n    },\r\n  ];\r\n  const onFilter = (value, record) => {\r\n    return record;\r\n  }\r\n\r\n  const { result: listResult, isLoading: listIsLoading } = useSelector(selectListItems);\r\n  const { pagination, items, objFilterList } = listResult;\r\n\r\n  const dispatch = useDispatch();\r\n  const handelDataTableLoad = useCallback((pagination, filters) => {\r\n    const options = { page: pagination.current || 1, pageSize: pagination.pageSize || 100, filters, sorter, arrFiltersReq };\r\n    dispatch(erp.list({ listURL, options }));\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    dispatch(erp.list({\r\n      listURL, options: {\r\n        page: pagination.current || 1, pageSize: pagination.pageSize || 100\r\n      }\r\n    }));\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      <PageHeader\r\n        title={DATATABLE_TITLE}\r\n        ghost={true}\r\n        extra={[\r\n          <Button onClick={handelDataTableLoad} key={`${uniqueId()}`} icon={<RedoOutlined />} className='outLineIcon'>\r\n            Refresh\r\n          </Button>,\r\n        ]}\r\n        style={{\r\n          padding: '20px 0px',\r\n        }}\r\n      ></PageHeader>\r\n      <TableResponsive\r\n        columns={dataTableColumns}\r\n        rowKey={(item) => item.id}\r\n        dataSource={items}\r\n        pagination={pagination}\r\n        loading={listIsLoading}\r\n        onChange={handelDataTableLoad}\r\n      />\r\n    </>\r\n  );\r\n}","import React, { useEffect, useState } from 'react';\r\nimport { Modal, Select } from 'antd';\r\n\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { erp } from '@/redux/erp/actions';\r\nimport { useErpContext } from '@/context/erp';\r\nimport { selectDeletedItem } from '@/redux/erp/selectors';\r\nimport { valueByString } from '@/utils/helpers';\r\n\r\nconst { Option } = Select;\r\n\r\nexport default function ChangeFrequancyModal({ config }) {\r\n    let {\r\n        deleteURL,\r\n        entityDisplayLabels,\r\n        Message = 'Do you Want to Change Weather sending Frequacy ',\r\n        modalTitle = 'Change Fequancy',\r\n        listURL,\r\n        deleteRequest\r\n    } = config;\r\n    const dispatch = useDispatch();\r\n    const { current, isLoading, isSuccess } = useSelector(selectDeletedItem);\r\n    const { state, erpContextAction } = useErpContext();\r\n    const { statusModal } = state;\r\n    const { statusModals } = erpContextAction;\r\n    const [displayItem, setDisplayItem] = useState('');\r\n    const [selectedStatus, setSelectedStatus] = useState('');\r\n\r\n    useEffect(() => {\r\n        if (isSuccess) {\r\n            statusModals.close();\r\n            dispatch(erp.list({ listURL }));\r\n        }\r\n        if (current) {\r\n            let labels = entityDisplayLabels.map((x) => valueByString(current, x)).join(' ');\r\n\r\n            setDisplayItem(labels);\r\n        }\r\n    }, [isSuccess, current]);\r\n\r\n\r\n    const handleOk = () => {\r\n        if (selectedStatus !='') {\r\n            statusModals.close();\r\n            dispatch(\r\n                erp.create({\r\n                    createURL: 'update_freequcny',\r\n                    jsonData: {\r\n                        _id: current._id,\r\n                        strFreequancyType: selectedStatus,\r\n                    },\r\n                })\r\n            ).then(() => {\r\n                setSelectedStatus('')\r\n                dispatch(erp.list({ listURL }));\r\n            })\r\n        }\r\n    };\r\n    const handleCancel = () => {\r\n        if (!isLoading) statusModals.close();\r\n    };\r\n    const handleStatusChange = (value) => {\r\n        setSelectedStatus(value);\r\n    };\r\n\r\n    return (\r\n        <Modal\r\n            okButtonProps={{ className: 'primaryBtn' }}\r\n            title={modalTitle}\r\n            visible={statusModal.isOpen}\r\n            onOk={handleOk}\r\n            onCancel={handleCancel}\r\n            confirmLoading={isLoading}\r\n        >\r\n            <p>\r\n                {`${Message} `}\r\n            </p>\r\n            <Select\r\n                style={{ width: '100%', marginTop: '16px' }}\r\n                placeholder=\"Select Status\"\r\n                onChange={handleStatusChange}\r\n            >\r\n                <Option value=\"Hourly\">Hourly</Option>\r\n                <Option value=\"Daily\">Daily</Option>\r\n                <Option value=\"Weekly\">Weekly</Option>\r\n            </Select>\r\n        </Modal>\r\n    );\r\n}\r\n","import DataTable from \"./DataTable\";\r\nimport { useDispatch ,useSelector} from 'react-redux';\r\nimport { erp } from '@/redux/erp/actions';\r\nimport { useErpContext } from '@/context/erp';\r\nimport { useLayoutEffect } from \"react\";\r\nimport Visibility from \"../Visibility\";\r\nimport ChangeFrequancyModal from \"./FreequancyChange\";\r\n\r\n\r\n  export default function FreequancyPanel({config,DataTableDropMenu}) {\r\n    const dispatch = useDispatch();\r\n    const { state } = useErpContext();\r\n    const { dataTableList,statusModal } = state;\r\n    useLayoutEffect(() => {\r\n      dispatch(erp.resetState());\r\n    }, []);\r\n    return (\r\n      <>\r\n      <Visibility isVisible={dataTableList.isOpen}>\r\n          <DataTable config={config} DataTableDropMenu={DataTableDropMenu} />\r\n          <ChangeFrequancyModal  config={config} isVisible={statusModal.isOpen} />\r\n     </Visibility>\r\n      </>\r\n    );\r\n  }","import { Menu } from 'antd';\r\n\r\nimport {\r\n  EditOutlined,\r\n} from '@ant-design/icons';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { erp } from '@/redux/erp/actions';\r\nimport { selectListItems, selectItemById } from '@/redux/erp/selectors';\r\nimport { useErpContext } from '@/context/erp';\r\n\r\nimport uniqueId from '@/utils/uinqueId';\r\n\r\n\r\n\r\nexport default function DataTableDropMenu({ row, entity }) {\r\n  const dispatch = useDispatch();\r\n  const { erpContextAction } = useErpContext();\r\n  const { statusModals } = erpContextAction;\r\n  const item = row;\r\n \r\n\r\n  function Status() {\r\n    dispatch(erp.currentAction({ actionType: 'delete', data: item }));\r\n    statusModals.open();\r\n  }\r\n\r\n\r\n  return (\r\n    <Menu style={{ minWidth: 130 }}>\r\n      <Menu.Item key={`${uniqueId()}`} icon={<EditOutlined />} onClick={Status}>\r\n      Update Frequency\r\n      </Menu.Item>\r\n    </Menu>\r\n  );\r\n}\r\n","\r\nimport React from 'react'\r\nimport DataTableDropMenu from './DataTableDropMen'\r\nimport UserLayout from '@/layout/UserLayout'\r\nimport FreequancyPanel from '@/components/FreequancyPanel'\r\n\r\nexport default function FreequancyModule({config}) {\r\n  return (\r\n    <UserLayout>\r\n      <FreequancyPanel config={config}\r\n        DataTableDropMenu={DataTableDropMenu}\r\n      />\r\n    </UserLayout>\r\n  )\r\n}\r\n\r\n","import React from 'react';\r\nimport dayjs from 'dayjs';\r\nimport 'dayjs/locale/en';\r\nimport FreequancyModule from '@/modules/FreequancyModule';\r\n\r\ndayjs.locale('en');\r\n\r\nexport default function Frequancy() {\r\n  const entity = 'Users';\r\n  const searchConfig = {\r\n    displayLabels: ['name', 'strFreequancyType'],\r\n    searchFields: 'strFreequancyType',\r\n  };\r\n\r\n\r\n  const entityDisplayLabels = ['number', 'strFreequancyType'];\r\n\r\n \r\n  const dataTableColumns = [\r\n    { title: 'frequency', dataIndex: 'strFreequancyType' },\r\n  ];\r\n\r\n  const PANEL_TITLE = 'Frequency Panel';\r\n  const dataTableTitle = 'Frequency Lists';\r\n  const DATATABLE_TITLE = 'Frequency List';\r\n  const ENTITY_NAME = 'Frequency';\r\n\r\n  const config = {\r\n    entity,\r\n    PANEL_TITLE,\r\n    dataTableTitle,\r\n    ENTITY_NAME,\r\n    DATATABLE_TITLE,\r\n    dataTableColumns,\r\n    searchConfig,\r\n    deleteMessage: ' ',\r\n    entityDisplayLabels,\r\n    createURL: '',\r\n    listURL: 'get_freequancy',\r\n    deleteURL: '',\r\n\r\n  };\r\n\r\n  return <FreequancyModule config={config} />;\r\n}\r\n\r\n\r\n","import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\n// GENERATE BY ./scripts/generate.ts\n// DON NOT EDIT IT MANUALLY\nimport * as React from 'react';\nimport EditOutlinedSvg from \"@ant-design/icons-svg/es/asn/EditOutlined\";\nimport AntdIcon from '../components/AntdIcon';\n\nvar EditOutlined = function EditOutlined(props, ref) {\n  return /*#__PURE__*/React.createElement(AntdIcon, _objectSpread(_objectSpread({}, props), {}, {\n    ref: ref,\n    icon: EditOutlinedSvg\n  }));\n};\n\nEditOutlined.displayName = 'EditOutlined';\nexport default /*#__PURE__*/React.forwardRef(EditOutlined);"],"names":["DataTable","_ref2","config","DataTableDropMenu","entity","dataTableColumns","listURL","arrFiltersReq","sorter","filters","DATATABLE_TITLE","title","dataIndex","width","render","value","record","index","concat","_toConsumableArray","row","_jsx","Dropdown","overlay","trigger","children","EllipsisOutlined","style","cursor","fontSize","_useSelector","useSelector","selectListItems","listResult","result","listIsLoading","isLoading","pagination","items","dispatch","objFilterList","useDispatch","handelDataTableLoad","useCallback","options","page","current","pageSize","erp","list","useEffect","_jsxs","_Fragment","PageHeader","ghost","extra","Button","onClick","icon","RedoOutlined","className","uniqueId","padding","TableResponsive","columns","rowKey","item","id","dataSource","loading","onChange","Option","Select","ChangeFrequancyModal","_ref","entityDisplayLabels","deleteURL","_config$Message","Message","_config$modalTitle","modalTitle","deleteRequest","selectDeletedItem","isSuccess","_useErpContext","useErpContext","state","erpContextAction","statusModal","statusModals","_useState","useState","_useState2","_slicedToArray","setDisplayItem","_useState3","_useState4","selectedStatus","setSelectedStatus","close","labels","map","x","valueByString","join","Modal","okButtonProps","visible","isOpen","onOk","create","createURL","jsonData","_id","strFreequancyType","then","onCancel","confirmLoading","marginTop","placeholder","FreequancyPanel","dataTableList","useLayoutEffect","resetState","Visibility","isVisible","Menu","minWidth","Item","EditOutlined","currentAction","actionType","data","open","FreequancyModule","UserLayout","Frequancy","PANEL_TITLE","dataTableTitle","ENTITY_NAME","searchConfig","displayLabels","searchFields","deleteMessage","dayjs","props","ref","React","AntdIcon","_objectSpread","EditOutlinedSvg","displayName"],"sourceRoot":""}